/////////////
// DEFINES //
/////////////
#define NUM_LIGHTS 1

/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightColorBuffer
{
	float4 diffuseColor[NUM_LIGHTS];
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 lightPos : TEXCOORD1;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float lightIntensity;
	float4 color;
	
	// Calculate the different amounts of light on this pixel based on the positions of the lights.
	lightIntensity = saturate(dot(input.normal, input.lightPos));
	
	// Determine the diffuse color amount of each of the four lights.
	color = diffuseColor[0] * lightIntensity;

	// Sample the texture pixel at this location.
	textureColor = shaderTexture.Sample(SampleType, input.tex);

	// Multiply the texture pixel by the combination of all four light colors to get the final result.
	color = saturate(color) * textureColor;
	
	return color;
}
